COMP 50CP PROJECT INITIAL DESIGN

GROUP

#ConcurrentSwag, pronounced "littletictactoeboard concurrent swag", the group
formerly known as "octothorpe concurrent swag"

MEMBERS

Arthur "Bermanator" Berman, Thomas "Tommasso" Colgrove, Kate "Kate" Wasynczuk,
Maxwell "Emacs" Bernstein

STORY

1. PROBLEM

We want to parallelize ray tracing across multiple machines instead of just
multiple processes on one machine. These machines and processes need to
communicate.

2. WAYS CONSIDERED

(a) A thin-server and heavy-client approach, where each client is knowledgeable
about the scene and only asks the server for areas of pixels to work on.

(b) A manager/thin-server, and heavy-client approach, where the manager spawns
the server and clients.

(c) A manager, not-so-thin-server, and heavy-client approach, where the manager
controls the scene(s) being worked on, and server can communicate scenes to
clients.

3. WHAT WE CHOSE

We chose (c) because it offers the most extensibility and least amount of
mutable resource sharing. It is also the easiest to employ in a practical
manner. For example, imagine rending several scenes - a thin-server would not
alone be able to distinguish between the scenes.

PROGRESS

1. Developed a clear client/server architecture. 

2. Extensively researched ray-tracing algorithms. 

3. Implemented some simple c++ classes for core data structures and modules (PNM
   rendering, vector math, objects in 3d space).

4. Built unit tests. 

PLAN

We will operate in one-week sprints as pairs. Programming will be done in the
COMP 40 pair-programming paradigm, with two members of the group on one
computer, with one driving and the other providing feedback. In our first
sprint, one pair will develop a single-threaded ray tracer, while the other pair
will develop the scene description parser. In the second sprint, we will switch
partners. One pair will integrate the work done in the first sprint, while the
other will begin building the message passing RPC system. In future sprints, we
will integrate
